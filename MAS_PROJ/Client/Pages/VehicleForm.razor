@page "/Vehicles/Create"
@page "/Vehicles/Create/{Id:int}"
@inject IVehicleService VehicleService
@inject NavigationManager NavigationManager

<PageTitle>Vehicle Form</PageTitle>

<EditForm Model="vehiclePost" class="mb-4">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <h5>Vehicle Data:</h5>
    <div class="d-flex flex-md-column mb-2">
        <div class="d-flex flex-column w-100">

            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="Manufacturer" class="mb-2">Manufacturer</label>
                <InputText id="Manufacturer" @bind-Value="vehiclePost.Manufacturer" class="mb-2" disabled="@isNewSubtype"></InputText>
                <ValidationMessage For="@(() => vehiclePost.Manufacturer)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="Model" class="mb-2">Model</label>
                <InputText id="Model" @bind-Value="vehiclePost.Model" class="mb-2" disabled="@isNewSubtype"></InputText>
                <ValidationMessage For="@(() => vehiclePost.Model)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="ProductionStart" class="mb-2">Production Start</label>
                <InputDate  id="ProductionStart" @bind-Value="vehiclePost.ProductionStart" class="mb-2" disabled="@isNewSubtype"></InputDate>
                <ValidationMessage For="@(() => vehiclePost.ProductionStart)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="ProductionEnd" class="mb-2">Production End</label>
                <InputDate Type="InputDateType.Date" id="ProductionEnd" @bind-Value="vehiclePost.ProductionEnd" class="mb-2 @((vehiclePost.ProductionStart > vehiclePost.ProductionEnd) ? "test" : "")" disabled="@isNewSubtype" ></InputDate>
                @if(vehiclePost.ProductionEnd != null)
                {
                    @if(vehiclePost.ProductionStart > vehiclePost.ProductionEnd)
                    {
                        <p class="text-danger">Production End should be after Production Start</p>
                    }
                }
            </div>
            <div class="mt-2 d-flex flex-column">
                <label for="VehicleNotes" class="mb-2">VehicleNotes</label>
                <InputTextArea id="ProductionEnd" @bind-Value="vehiclePost.VehicleNotes" class="mb-2" disabled="@isNewSubtype"></InputTextArea>
                <ValidationMessage For="@(() => vehiclePost.VehicleNotes)" class="mb-2"></ValidationMessage>
            </div>

        </div>
    </div>

    <h5 class="border-top border-dark pt-2">Subtype Data:</h5>
    <div class="d-flex flex-md-column mb-3">
        <div class="mt-2 d-flex flex-column border-bottom">
            <label for="SubtypeName" class="mb-2">Subtype Name</label>
            <InputText id="SubtypeName" @bind-Value="vehiclePost.Name" class="mb-2"></InputText>
            <ValidationMessage For="@(() => vehiclePost.Name)" class="mb-2"></ValidationMessage>
        </div>
        <div class="mt-2 d-flex flex-column border-bottom">
            <label for="SubtypeNotes" class="mb-2">Subtype Notes</label>
            <InputTextArea id="SubtypeNotes" @bind-Value="vehiclePost.SubtypeNotes" class="mb-2"></InputTextArea>
            <ValidationMessage For="@(() => vehiclePost.SubtypeNotes)" class="mb-2"></ValidationMessage>
        </div>

        <div class="mt-2 d-flex flex-column">
            <label for="SubtypeType" class="mb-2">Subtype Type</label>
            <InputSelect id="SubtypeType" @bind-Value="vehiclePost.SubType">
                <option selected value="@SubType.NotDefined">Select Vehicle Type...</option>
                <option value="@SubType.Land" >Land Vehicle</option>
                <option value="@SubType.Water" >Water Vehicle</option>
            </InputSelect>
            <ValidationMessage For="@(() => vehiclePost.VehicleNotes)" class="mb-2"></ValidationMessage>
        </div>
    </div>
    @if (vehiclePost.SubType is SubType.Land or SubType.Water)
    {
        <h5 class="border-top border-dark pt-2">Subtype Type Specifics:</h5>
        <div class="d-flex flex-md-column mb-2 ">

            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="EnginePower" class="mb-2">Engine Power</label>
                <InputNumber id="EnginePower" @bind-Value="vehiclePost.EnginePower" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.EnginePower)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="EngineTorque" class="mb-2">Engine Torque</label>
                <InputNumber id="EngineTorque" @bind-Value="vehiclePost.EngineTorque" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.EngineTorque)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="MinCrew" class="mb-2">Min Crew</label>
                <InputNumber id="MinCrew" @bind-Value="vehiclePost.MinCrew" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.MinCrew)" class="mb-2"></ValidationMessage>
            </div>

        </div>

        <h5 class="border-top border-dark pt-2">Fuel Specifics</h5>
    }




    

        
    
    
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; } 

    private EditContext? editContext;

    //Booleans to handle element display status 
    //basic
    protected bool isNewSubtype { get; set; } = false;
    //typeOfVehicle
    public bool hideSubtype { get; set; } = true;
    public bool isLandVehicle { get; set; } = false;
    public bool isWaterVehicle { get; set; } = false;




    public VehiclePost vehiclePost = new VehiclePost();

    protected override async Task OnParametersSetAsync()
    {
        var response = await VehicleService.GetVehicleByIdAsync(Id);

        if (response.Success && response.Data != null)
        {
            isNewSubtype = true;

            //bind data to vehiclePost
            vehiclePost.Manufacturer = response.Data.Manufacturer;
            vehiclePost.Model = response.Data.Model;
            vehiclePost.ProductionStart = response.Data.ProductionStart;
            vehiclePost.ProductionEnd = response.Data.ProductionEnd;
            vehiclePost.VehicleNotes = response.Data.VehicleNotes;

            
        }

        
    }




    private async Task HandleVehicleSubType(SubType value)
    {

        vehiclePost.SubType = value;
        isLandVehicle = false;
        isWaterVehicle = false;
        hideSubtype = true;

        switch (vehiclePost.SubType)
        {
            case SubType.Land:
                {
                    isLandVehicle = true;
                    hideSubtype = false;
                    break;
                }
            case SubType.Water:
                {
                    isWaterVehicle = true;
                    hideSubtype = false;
                    break;
                }
        }

        await InvokeAsync(StateHasChanged);
    }



}
