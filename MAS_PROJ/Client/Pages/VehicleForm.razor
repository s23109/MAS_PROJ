@page "/Vehicles/Create"
@page "/Vehicles/Create/{Id:int}"
@inject IVehicleService VehicleService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Vehicle Form</PageTitle>

<EditForm Model="vehiclePost" class="mb-4" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <h5>Vehicle Data:</h5>
    <div class="d-flex flex-md-column mb-2">
        <div class="d-flex flex-column w-100">

            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="Manufacturer" class="mb-2">Manufacturer</label>
                <InputText id="Manufacturer" @bind-Value="vehiclePost.Manufacturer" class="mb-2" disabled="@isNewSubtype"></InputText>
                <ValidationMessage For="@(() => vehiclePost.Manufacturer)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="Model" class="mb-2">Model</label>
                <InputText id="Model" @bind-Value="vehiclePost.Model" class="mb-2" disabled="@isNewSubtype"></InputText>
                <ValidationMessage For="@(() => vehiclePost.Model)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="ProductionStart" class="mb-2">Production Start</label>
                <InputDate  id="ProductionStart" @bind-Value="vehiclePost.ProductionStart" class="mb-2" disabled="@isNewSubtype"></InputDate>
                <ValidationMessage For="@(() => vehiclePost.ProductionStart)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="ProductionEnd" class="mb-2">Production End</label>
                <InputDate Type="InputDateType.Date" id="ProductionEnd" @bind-Value="vehiclePost.ProductionEnd" class="mb-2 " disabled="@isNewSubtype" ></InputDate>
                @if(vehiclePost.ProductionEnd != null)
                {
                    @if(vehiclePost.ProductionStart > vehiclePost.ProductionEnd)
                    {
                        <p class="text-danger">Production End should be after Production Start</p>
                    }
                }
            </div>
            <div class="mt-2 d-flex flex-column">
                <label for="VehicleNotes" class="mb-2">VehicleNotes</label>
                <InputTextArea id="ProductionEnd" @bind-Value="vehiclePost.VehicleNotes" class="mb-2" disabled="@isNewSubtype"></InputTextArea>
                <ValidationMessage For="@(() => vehiclePost.VehicleNotes)" class="mb-2"></ValidationMessage>
            </div>

        </div>
    </div>

    <h5 class="border-top border-dark pt-2">Subtype Data:</h5>
    <div class="d-flex flex-column mb-3">
        <div class="mt-2 d-flex flex-column border-bottom">
            <label for="SubtypeName" class="mb-2">Subtype Name</label>
            <InputText id="SubtypeName" @bind-Value="vehiclePost.Name" class="mb-2"></InputText>
            <ValidationMessage For="@(() => vehiclePost.Name)" class="mb-2"></ValidationMessage>
        </div>
        <div class="mt-2 d-flex flex-column border-bottom">
            <label for="SubtypeNotes" class="mb-2">Subtype Notes</label>
            <InputTextArea id="SubtypeNotes" @bind-Value="vehiclePost.SubtypeNotes" class="mb-2"></InputTextArea>
            <ValidationMessage For="@(() => vehiclePost.SubtypeNotes)" class="mb-2"></ValidationMessage>
        </div>

        <div class="mt-2 d-flex flex-column">
            <label for="SubtypeType" class="mb-2">Subtype Type</label>
            <InputSelect id="SubtypeType" @bind-Value="vehiclePost.SubType">
                <option selected value="@SubType.NotDefined">Select Vehicle Type...</option>
                <option value="@SubType.Land" >Land Vehicle</option>
                <option value="@SubType.Water" >Water Vehicle</option>
            </InputSelect>
            <ValidationMessage For="@(() => vehiclePost.SubType)" class="mb-2"></ValidationMessage>
        </div>
    </div>
    
    @if (vehiclePost.SubType is SubType.Land or SubType.Water)
    {
        <h5 class="border-top border-dark pt-2">Subtype Type Specifics:</h5>
        <div class="d-flex flex-column mb-2 ">

            @if (vehiclePost.SubType is SubType.Land)
            {
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="EnginePower" class="mb-2">Engine Power</label>
                <InputNumber id="EnginePower" @bind-Value="vehiclePost.EnginePower" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.EnginePower)" class="mb-2"></ValidationMessage>
            </div>
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="EngineTorque" class="mb-2">Engine Torque</label>
                <InputNumber id="EngineTorque" @bind-Value="vehiclePost.EngineTorque" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.EngineTorque)" class="mb-2"></ValidationMessage>
            </div>
            }

            @if(vehiclePost.SubType is SubType.Water)
            {
            <div class="mt-2 d-flex flex-column border-bottom">
                <label for="MinCrew" class="mb-2">Min Crew</label>
                <InputNumber id="MinCrew" @bind-Value="vehiclePost.MinCrew" class="mb-2"></InputNumber>
                <ValidationMessage For="@(() => vehiclePost.MinCrew)" class="mb-2"></ValidationMessage>
            </div>
            }
        </div>


        
        <h5 class="border-top border-dark pt-2">Fuel Specifics</h5>
        <div class="d-flex flex-md-column mb-2 ">
            <div class="d-flex flex-md-row mb-2 justify-content-around w-100">
                <div class="mt-2 d-flex flex-column border-bottom">
                <label for="fuelCombustion" class="mb-2">Combustion</label>
                <InputCheckbox id="fuelCombustion" @bind-Value="fuelCombustion" class="mb-2" @onclick="HandleFuel"></InputCheckbox>
                </div>
                <div class="mt-2 d-flex flex-column border-bottom">
                <label for="fuelElectric" class="mb-2">Electric</label>
                    <InputCheckbox id="fuelElectric" @bind-Value="fuelElectric" class="mb-2" @onclick="HandleFuel"></InputCheckbox>
                </div>
                <div class="mt-2 d-flex flex-column border-bottom">
                <label for="fuelOther" class="mb-2">Other</label>
                    <InputCheckbox id="fuelOther" @bind-Value="fuelOther" class="mb-2" @onclick="HandleFuel"></InputCheckbox>
                </div>

                <ValidationMessage For="@(() => vehiclePost.FuelType )" class="mb-2"></ValidationMessage>
            </div>
            @if (fuelCombustion)
            {
                <div class="mt-2 d-flex flex-column border-bottom">
                    <label for="tankCapacity" class="mb-2">Tank Capacity</label>
                    <InputNumber id="tankCapacity" @bind-Value="vehiclePost.TankCapacity" class="mb-2"></InputNumber>
                    <ValidationMessage For="@(() => vehiclePost.TankCapacity)" class="mb-2"></ValidationMessage>
                </div>
                <div class="mt-2 d-flex flex-column">
                    <label for="CombustionTypes" class="mb-2">Combustion Type</label>
                    <InputSelect id="CombustionTypes" @bind-Value="vehiclePost.CombustionType">
                        <option selected value="@CombustionTypes.NotDefined">Select Combustion Type...</option>
                        <option value="@CombustionTypes.Diesel">Diesel</option>
                        <option value="@CombustionTypes.Gasoline">Gasoline</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => vehiclePost.CombustionType)" class="mb-2"></ValidationMessage>
                </div>
            }

            @if (fuelElectric)
            {
                <div class="mt-2 d-flex flex-column border-bottom">
                    <label for="batteryCapacity" class="mb-2">Battery Capacity</label>
                    <InputNumber id="batteryCapacity" @bind-Value="vehiclePost.BatteryCapacity" class="mb-2"></InputNumber>
                    <ValidationMessage For="@(() => vehiclePost.BatteryCapacity)" class="mb-2"></ValidationMessage>
                </div>
                <div class="mt-2 d-flex flex-column">
                    <label for="batteryType" class="mb-2">Battery Type</label>
                    <InputSelect id="batteryType" @bind-Value="vehiclePost.BatteryType">
                        <option selected value="@BatteryTypes.NotDefined">Select Battery Type...</option>
                        <option value="@BatteryTypes.NMC">NMC</option>
                        <option value="@BatteryTypes.LMO">LMO</option>
                        <option value="@BatteryTypes.LFP">LFP</option>
                        <option value="@BatteryTypes.NCA">NCA</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => vehiclePost.BatteryType)" class="mb-2"></ValidationMessage>
                </div>
            }

            @if (fuelOther)
            {
                <div class="mt-2 d-flex flex-column border-bottom">
                    <label for="fuelTypeDescription" class="mb-2">FuelType Description</label>
                    <InputTextArea id="fuelTypeDescription" @bind-Value="vehiclePost.FuelTypeDescription" class="mb-2"></InputTextArea>
                    <ValidationMessage For="@(() => vehiclePost.FuelTypeDescription)" class="mb-2"></ValidationMessage>
                </div>
            }



        </div>

        @if(vehiclePost.SubType is SubType.Land)
        {
            <h5 class="border-top border-dark pt-2">Poise Specifics</h5>
            <div class="d-flex flex-md-column mb-2 ">
                <div class="d-flex flex-md-row mb-2 justify-content-around w-100">
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="poiseWheels" class="mb-2">Wheels</label>
                        <InputCheckbox id="poiseWheels" @bind-Value="poiseWheels" class="mb-2" @onclick="HandlePoises"></InputCheckbox>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="poiseTracks" class="mb-2">Tracks</label>
                        <InputCheckbox id="poiseTracks" @bind-Value="poiseTracks" class="mb-2" @onclick="HandlePoises"></InputCheckbox>
                    </div>
                    <ValidationMessage For="@(() => vehiclePost.PoiseType)"></ValidationMessage>
                </div>

                @if (poiseWheels)
                {
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="wheelAmount" class="mb-2">Wheel Amount</label>
                        <InputNumber id="wheelAmount" @bind-Value="vehiclePost.WheelAmount" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.WheelAmount)" class="mb-2"></ValidationMessage>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="wheelWidth" class="mb-2">Wheel Width</label>
                        <InputNumber id="wheelWidth" @bind-Value="vehiclePost.WheelWidth" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.WheelWidth)" class="mb-2"></ValidationMessage>
                    </div>
                }

                @if (poiseTracks)
                {
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="trackLength" class="mb-2">Track Length</label>
                        <InputNumber id="trackLength" @bind-Value="vehiclePost.TrackLength" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.TrackLength)" class="mb-2"></ValidationMessage>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="trackWidth" class="mb-2">Track Width</label>
                        <InputNumber id="trackWidth" @bind-Value="vehiclePost.TrackWidth" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.TrackWidth)" class="mb-2"></ValidationMessage>
                    </div>
                }

            </div>
        }

        @if(vehiclePost.SubType is SubType.Water)
        {
            <h5 class="border-top border-dark pt-2">Purpose Specifics</h5>
            <div class="d-flex flex-md-column mb-2 ">
                <div class="d-flex flex-md-row mb-2 justify-content-around w-100">
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="purposeTransport" class="mb-2">Transport</label>
                        <InputCheckbox id="purposeTransport" @bind-Value="purposeTransport" class="mb-2" @onclick="HandlePurpose"></InputCheckbox>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="purposePassenger" class="mb-2">Passenger</label>
                        <InputCheckbox id="purposePassenger" @bind-Value="purposePassenger" class="mb-2" @onclick="HandlePurpose"></InputCheckbox>
                    </div>
                    <ValidationMessage For="@(() => vehiclePost.PurposeType )"></ValidationMessage>
                </div>

                @if (purposePassenger)
                {
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="minLifeBoats" class="mb-2">Min LifeBoats</label>
                        <InputNumber id="minLifeBoats" @bind-Value="vehiclePost.MinLifeBoats" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.MinLifeBoats)" class="mb-2"></ValidationMessage>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="maxPassengers" class="mb-2">Max Passengers</label>
                        <InputNumber id="maxPassengers" @bind-Value="vehiclePost.MaxPassengers" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.MaxPassengers)" class="mb-2"></ValidationMessage>
                    </div>
                }

                @if (purposeTransport)
                {
                    <div class="mt-2 d-flex flex-column">
                        <label for="loadType" class="mb-2">Load Type</label>
                        <InputSelect id="batteryType" @bind-Value="vehiclePost.LoadType">
                            <option selected value="@LoadTypes.NotDefined">Select Load Type...</option>
                            <option value="@LoadTypes.Solid">Solid</option>
                            <option value="@LoadTypes.Gas">Gas</option>
                            <option value="@LoadTypes.Liquid">Liquid</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => vehiclePost.LoadType)" class="mb-2"></ValidationMessage>
                    </div>
                    <div class="mt-2 d-flex flex-column border-bottom">
                        <label for="shipCapacity" class="mb-2">Ship Capacity</label>
                        <InputNumber id="shipCapacity" @bind-Value="vehiclePost.ShipCapacity" class="mb-2"></InputNumber>
                        <ValidationMessage For="@(() => vehiclePost.ShipCapacity)" class="mb-2"></ValidationMessage>
                    </div>
                }

            </div>
        }
    }

    <div class="mt-2 d-flex flex-row justify-content-around">
        <button type="submit" class="btn btn-primary">Send</button>
    </div>
    

</EditForm>


@code {
    [Parameter]
    public int Id { get; set; } 

    //Booleans to handle element display status 
    protected bool isNewSubtype { get; set; } = false;

    protected bool fuelCombustion { get; set; } = false;
    protected bool fuelElectric { get; set; } = false;
    protected bool fuelOther { get; set; } = false;

    protected bool poiseWheels { get; set; } = false;
    protected bool poiseTracks { get; set; } = false;

    protected bool purposeTransport { get; set; } = false;
    protected bool purposePassenger { get; set; } = false;




    public VehiclePost vehiclePost = new VehiclePost();


    protected override async Task OnParametersSetAsync()
    {
        if (Id!= null)
        {
        var response = await VehicleService.GetVehicleByIdAsync(Id);

        if (response.Success && response.Data != null)
        {
            isNewSubtype = true;

            //bind data to vehiclePost
            vehiclePost.Manufacturer = response.Data.Manufacturer;
            vehiclePost.Model = response.Data.Model;
            vehiclePost.ProductionStart = response.Data.ProductionStart;
            vehiclePost.ProductionEnd = response.Data.ProductionEnd;
            vehiclePost.VehicleNotes = response.Data.VehicleNotes;

        }
        }

    }

    protected void HandlePoises()
    {
        var poises = new Dictionary<Tuple<bool, bool>, PoiseTypes>()
        {
            {Tuple.Create(false,false), PoiseTypes.NotDefined},
            {Tuple.Create(false,true), PoiseTypes.Wheels},
            {Tuple.Create(true,false), PoiseTypes.Tracks},
            {Tuple.Create(true,true), PoiseTypes.WheelsTracks}
        };

        var currPoise = Tuple.Create(poiseTracks, poiseWheels);

        vehiclePost.PoiseType = poises[currPoise];
    }

    protected void HandlePurpose()
    {
        var purposes = new Dictionary<Tuple<bool, bool>, PurposeTypes>()
        {
            {Tuple.Create(false,false), PurposeTypes.NotDefined},
            {Tuple.Create(false,true), PurposeTypes.Transport},
            {Tuple.Create(true,false), PurposeTypes.Passenger},
            {Tuple.Create(true,true), PurposeTypes.TransportPassenger},
        };

        var currPurpose = Tuple.Create(purposePassenger, purposeTransport);

        vehiclePost.PurposeType = purposes[currPurpose];
    }

    protected void HandleFuel()
    {
        var fuels = new Dictionary<Tuple<bool, bool, bool>, FuelTypes>()
        {
            {Tuple.Create(false,false,false),FuelTypes.NotDefined},
            {Tuple.Create(false,false,true),FuelTypes.Combustion},
            {Tuple.Create(false,true,false),FuelTypes.Electric},
            {Tuple.Create(true,false,false),FuelTypes.Other},
            {Tuple.Create(false,true,true),FuelTypes.CombustionElectric},
            {Tuple.Create(true,false,true),FuelTypes.CombustionOther},
            {Tuple.Create(true,true,false),FuelTypes.ElectricOther},
            {Tuple.Create(true,true,true),FuelTypes.CombustionElectricOther},

        };

        var currFuel = Tuple.Create(fuelOther, fuelElectric, fuelCombustion);

        vehiclePost.FuelType = fuels[currFuel];
    }


    protected async Task HandleSubmit()
    {
        //first - handle enum 

        //Poise:
        HandlePoises();

        //Purpose:
        HandlePurpose();

        //Fuel:
        HandleFuel();

        //then send ...

        var result = new ServiceResponse<VehiclePost>();

        if (isNewSubtype)
        {
            //create only subtype 
            result =  await VehicleService.AddVehicleSubTypeAsync(vehiclePost,Id);
        }
        else
        {
            //create vehicle + subtype 
            result = await VehicleService.CreateVehicleAsync(vehiclePost);
        }

        if (result.Success)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Successfully Added Object");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", result.Message);
        }

    }

}
